org: imriparan
service: financeServer

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: test-user-pool-${self:custom.currentStage}
  userPoolClientName: test-user-pool-client-${self:custom.currentStage}

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-west-2
  memorySize: 128
  timeout: 3
  environment:
    CASH_FLOW_TABLE: cash-table-${self:service}-${opt:stage, self:provider.stage}
    CASH_FLOW_MAPPING_TABLE: mapping-table-${self:service}-${opt:stage, self:provider.stage}
    MASTER_SECRET: finance/master/key
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CASH_FLOW_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CASH_FLOW_MAPPING_TABLE}"
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:${opt:region, self:provider.region}:*:${self:provider.environment.MASTER_SECRET}"

functions:
  auth:
    handler: auth/handlers.authorize
    cors: true

  cashFlow:
    handler: app/handlers.cash_flows
    events:
      - http:
          method: any
          path: /cash
          cors: true
          authorizer:
            name: auth
            identitySource: method.request.header.access_token

  getCashFlowMappings:
    handler: app/handlers.get_cash_flow_mapping
    events:
      - http:
          method: get
          path: /mapping
          cors: true
          authorizer:
            name: auth
            identitySource: method.request.header.access_token

  putCashFlowMappings:
    handler: app/handlers.put_cash_flow_mapping
    events:
      - http:
          method: put
          path: /cash
          cors: true
          authorizer:
            name: auth
            identitySource: method.request.header.access_token

  hello:
    handler: hello/handlers.get
    events:
      - http:
          method: GET
          path: /hello
          cors: true

  putHello:
    handler: hello/handlers.put
    events:
      - http:
          method: PUT
          path: /hello
          cors: true
          authorizer:
            name: auth
            identitySource: method.request.header.access_token

  login:
    handler: auth/handlers.login
    events:
      - http:
          method: POST
          path: /login
          cors: true

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: ApiGatewayRestApi
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: 401
    MasterToken:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.MASTER_SECRET}
        Description: "Master token for the backend api. Works only in staging."
        GenerateSecretString:
          SecretStringTemplate: '{}'
          GenerateStringKey: "key"
          PasswordLength: 30
          ExcludeCharacters: '!"#$%&()*+,-/:;<=>?@[\]^_`{|}~\"'
    CashFlowTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: D
          - AttributeName: date
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CASH_FLOW_TABLE}
    CashFlowMappingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: D
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CASH_FLOW_MAPPING_TABLE}