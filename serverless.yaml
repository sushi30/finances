org: imriparan
service: financeServer

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: test-user-pool-${self:custom.currentStage}
  userPoolClientName: test-user-pool-client-${self:custom.currentStage}

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-west-2

functions:
  auth:
    handler: auth/handlers.authorize
    cors: true

  hello:
    handler: hello/handlers.get
    events:
      - http:
          method: GET
          path: /hello
          cors: true

  putHello:
    handler: hello/handlers.put
    events:
      - http:
          method: PUT
          path: /hello
          cors: true
          authorizer:
            name: auth
            identitySource: method.request.header.access_token

    login:
      handler: auth/handlers.login
      events:
        - http:
            method: POST
            path: /login
            cors: true

resources:
  Resources:
    #    CognitoUserPool:
    #      Type: AWS::Cognito::UserPool
    #      Properties:
    #        MfaConfiguration: OFF
    #        UserPoolName: ${self:custom.userPoolName}
    #        UsernameAttributes:
    #          - email
    #        Policies:
    #          PasswordPolicy:
    #            MinimumLength: 6
    #            RequireLowercase: False
    #            RequireNumbers: True
    #            RequireSymbols: False
    #            RequireUppercase: True
    #    CognitoUserPoolClient:
    #      Type: AWS::Cognito::UserPoolClient
    #      Properties:
    #        ClientName: ${self:custom.userPoolClientName}
    #        GenerateSecret: False
    #        UserPoolId:
    #          Ref: CognitoUserPool
    #    ApiGatewayAuthorizer:
    #      DependsOn:
    #        - ApiGatewayRestApi
    #      Type: AWS::ApiGateway::Authorizer
    #      Properties:
    #        Name: cognito-authorizer
    #        IdentitySource: method.request.header.Authorization
    #        RestApiId:
    #          Ref: ApiGatewayRestApi
    #        Type: COGNITO_USER_POOLS
    #        ProviderARNs:
    #          - Fn::GetAtt: [CognitoUserPool, Arn]
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'