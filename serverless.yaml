org: imriparan
service: finance-server

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: test-user-pool-${self:custom.currentStage}
  userPoolClientName: test-user-pool-client-${self:custom.currentStage}

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-west-2
  memorySize: 128
  timeout: 3
  environment:
    CASH_FLOW_TABLE: ${self:service}-${opt:stage, self:provider.stage}-cash-table
    CASH_FLOW_MAPPING_TABLE: ${self:service}-${opt:stage, self:provider.stage}-mapping-table
    MASTER_SECRET: ${self:service}-${opt:stage, self:provider.stage}-master-key
    USER_FILES_BUCKET: ${self:service}.${opt:stage, self:provider.stage}.user.files
    ENV: ${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:service}-${opt:stage, self:provider.stage}-*
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: arn:aws:secretsmanager:${opt:region, self:provider.region}:*:secret:${self:service}-${opt:stage, self:provider.stage}-*
    - Action:
        - s3:DeleteObject
        - s3:DeleteObjectTagging
        - s3:DeleteObjectVersion
        - s3:DeleteObjectVersionTagging
        - s3:GetObjectVersionTorrent
        - s3:GetObjectAcl
        - s3:GetObject
        - s3:GetObjectTorrent
        - s3:GetObjectVersionTagging
        - s3:GetObjectVersionAcl
        - s3:GetObjectTagging
        - s3:GetObjectVersionForReplication
        - s3:GetObjectVersion
        - s3:ListMultipartUploadParts
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:PutObjectLegalHold
        - s3:PutObjectRetention
        - s3:PutObjectTagging
        - s3:PutObjectVersionAcl
        - s3:PutObjectVersionTagging
        - s3:GetAccountPublicAccessBlock
        - s3:ListAllMyBuckets
        - s3:ListJobs
        - s3:HeadBucket
        - s3:ListBucket
      Effect: Allow
      Resource:
        - arn:aws:s3:::${self:service}.${opt:stage, self:provider.stage}*
        - arn:aws:s3:::${self:service}.${opt:stage, self:provider.stage}*/*

functions:
  auth:
    handler: auth/handlers.authorize
    cors: true

  cashFlow:
    handler: app/handlers.cash_flow
    events:
      - http:
          method: any
          path: /cash
          cors: true
          authorizer:
            name: auth
            identitySource: method.request.header.access_token

  getCashFlowMappings:
    handler: app/handlers.get_cash_flow_mapping
    events:
      - http:
          method: get
          path: /mapping
          cors: true
          authorizer:
            name: auth
            identitySource: method.request.header.access_token

  putCashFlowMappings:
    handler: app/handlers.put_cash_flow_mapping
    events:
      - http:
          method: put
          path: /cash
          cors: true
          authorizer:
            name: auth
            identitySource: method.request.header.access_token

  processNewFile:
    handler: app/handlers.process_new_file
    timeout: 30
    memorySize: 256
    events:
      - s3:
          bucket: ${self:provider.environment.USER_FILES_BUCKET}
          event: s3:ObjectCreated:*

  hello:
    handler: hello/handlers.get
    events:
      - http:
          method: GET
          path: /hello
          cors: true

  putHello:
    handler: hello/handlers.put
    events:
      - http:
          method: PUT
          path: /hello
          cors: true
          authorizer:
            name: auth
            identitySource: method.request.header.access_token

  login:
    handler: auth/handlers.login
    events:
      - http:
          method: POST
          path: /login
          cors: true

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: ApiGatewayRestApi
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: 401
    MasterToken:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.MASTER_SECRET}
        Description: "Master token for the backend api. Works only in staging."
        GenerateSecretString:
          SecretStringTemplate: '{}'
          GenerateStringKey: "key"
          PasswordLength: 30
          ExcludeCharacters: '!#$%&()*+,-/:;<=>?@[\]^_`{|}~\"'
    CashFlowTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: date
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CASH_FLOW_TABLE}
    CashFlowMappingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CASH_FLOW_MAPPING_TABLE}